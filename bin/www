#!/usr/bin/env node
// Esta línea le dice al sistema operativo que este archivo debe ser ejecutado con Node.js
//Diego Vega Bohórquez

// Importación de módulos necesarios
var app = require('../app'); // Importa el módulo 'app' 
var debug = require('debug')('proy-2:server'); // Importa el módulo 'debug' para mensajes de depuración
var http = require('http'); // Importa el módulo 'http' para crear el servidor HTTP

// Obtiene el puerto del entorno y lo establece en Express
var port = normalizePort(process.env.PORT || '3000'); // Obtiene el puerto del entorno o utiliza el puerto 3000 por defecto
app.set('port', port); // Establece el puerto en la aplicación Express

// Crea un servidor HTTP
var server = http.createServer(app); // Crea el servidor HTTP usando la aplicación Express

// Escucha en el puerto proporcionado
server.listen(port); // Hace que el servidor escuche en el puerto especificado
server.on('error', onError); // Maneja errores de servidor
server.on('listening', onListening); // Maneja el evento de escucha del servidor

// Normaliza un puerto en un número, cadena o falso
function normalizePort(val) {
  var port = parseInt(val, 10); // Convierte el valor del puerto a un número entero

  if (isNaN(port)) {
    // Si no es un número, devuelve el valor original 
    return val;
  }

  if (port >= 0) {
    // Si es un número válido, devuelve el número del puerto
    return port;
  }

  return false;
}

// Manejador de eventos para el error del servidor HTTP
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Maneja errores específicos de escucha
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Manejador de eventos para el evento de escucha del servidor HTTP
function onListening() {
  var addr = server.address(); // Obtiene la dirección del servidor
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind); // Muestra un mensaje de depuración con la dirección y el puerto en el que está escuchando el servidor
}

